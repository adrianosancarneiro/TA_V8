{
  "health_results": {
    "chunking": {
      "status": "healthy",
      "response_time": 0.017966,
      "data": {
        "status": "healthy",
        "service": "chunking-mcp",
        "version": "1.0.0",
        "timestamp": "2025-09-27T02:07:09.759515",
        "dependencies": {
          "postgresql": "connected",
          "neo4j": "connected",
          "minio": "connected"
        }
      }
    },
    "embedding": {
      "status": "healthy",
      "response_time": 0.008467,
      "data": {
        "status": "unhealthy",
        "service": "embedding-mcp",
        "version": "1.0.0",
        "timestamp": "2025-09-27T02:07:09.768712",
        "error": "[Errno -3] Temporary failure in name resolution"
      }
    },
    "retrieval": {
      "status": "healthy",
      "response_time": 0.013349,
      "data": {
        "status": "healthy",
        "service": "retrieval-mcp",
        "version": "1.0.0",
        "timestamp": "2025-09-27T02:07:09.782204",
        "dependencies": {
          "postgresql": "connected",
          "qdrant": "connected",
          "embedding_mcp": "connected"
        }
      }
    },
    "rag_agent_team": {
      "status": "healthy",
      "response_time": 0.020098,
      "data": {
        "status": "healthy",
        "timestamp": "2025-09-27T08:07:09.783771",
        "service": "TA_V8 RAG Agent Team",
        "version": "8.0",
        "agents": {
          "retriever": {
            "status": "ready",
            "role": "retriever",
            "tools": [
              "mcp_retrieval_service"
            ],
            "capabilities": {
              "max_results": 10,
              "similarity_threshold": 0.7,
              "metadata_aware": true,
              "semantic_search": true
            }
          },
          "critic": {
            "status": "ready",
            "role": "critic",
            "tools": [
              "quality_assessment",
              "decision_making"
            ],
            "capabilities": {
              "quality_threshold": 0.8,
              "completeness_check": true,
              "relevance_scoring": true,
              "feedback_generation": true
            }
          },
          "refiner": {
            "status": "ready",
            "role": "refiner",
            "tools": [
              "query_refinement",
              "llm_rephrasing",
              "response_crafting",
              "citation_management"
            ],
            "capabilities": {
              "query_generation": true,
              "llm_integration": true,
              "response_crafting": true,
              "citation_formatting": true,
              "user_interaction": true
            }
          }
        },
        "services": {
          "chunking_mcp": {
            "status": "unhealthy",
            "transport": "http",
            "error": "cannot access local variable 'healthy_services' where it is not associated with a value",
            "url": "http://localhost:8001"
          },
          "embedding_mcp": {
            "status": "unhealthy",
            "transport": "http",
            "error": "cannot access local variable 'healthy_services' where it is not associated with a value",
            "url": "http://localhost:8004"
          },
          "retrieval_mcp": {
            "status": "unhealthy",
            "transport": "http",
            "error": "cannot access local variable 'healthy_services' where it is not associated with a value",
            "url": "http://localhost:8003"
          },
          "vllm": {
            "status": "unhealthy",
            "transport": "http",
            "error": "All connection attempts failed",
            "url": "http://localhost:8000"
          }
        },
        "sessions": {
          "active_count": 0,
          "max_sessions": 1000
        },
        "capabilities": {
          "langgraph": true,
          "autogen": true
        }
      }
    }
  },
  "mcp_results": {
    "chunking": {
      "initialize": {
        "status_code": 200,
        "success": true,
        "data": {
          "protocolVersion": "2024-11-05",
          "capabilities": {
            "tools": {
              "listChanged": true
            }
          },
          "serverInfo": {
            "name": "chunking_v1",
            "version": "1.0.0"
          }
        }
      },
      "tools_list": {
        "status_code": 200,
        "success": true,
        "data": {
          "tools": [
            {
              "name": "chunk_document",
              "description": "Chunk document using specified policy",
              "inputSchema": {
                "type": "object",
                "properties": {
                  "content": {
                    "type": "string",
                    "description": "Document content to chunk"
                  },
                  "policy": {
                    "type": "object",
                    "description": "Chunking policy configuration",
                    "properties": {
                      "method": {
                        "type": "string",
                        "default": "recursive"
                      },
                      "target_tokens": {
                        "type": "integer",
                        "default": 512
                      }
                    }
                  }
                },
                "required": [
                  "content"
                ]
              }
            }
          ]
        }
      }
    },
    "embedding": {
      "initialize": {
        "status_code": 200,
        "success": true,
        "data": {
          "protocolVersion": "2024-11-05",
          "capabilities": {
            "tools": {
              "listChanged": true
            }
          },
          "serverInfo": {
            "name": "embedding-mcp",
            "version": "1.0.0"
          }
        }
      },
      "tools_list": {
        "status_code": 200,
        "success": true,
        "data": {
          "tools": [
            {
              "name": "embed_documents",
              "description": "Generate embeddings for documents and store in vector database",
              "inputSchema": {
                "type": "object",
                "properties": {
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "Document ID"
                        },
                        "text": {
                          "type": "string",
                          "description": "Text to embed"
                        },
                        "metadata": {
                          "type": "object",
                          "description": "Document metadata"
                        }
                      },
                      "required": [
                        "id",
                        "text"
                      ]
                    }
                  },
                  "tenant_id": {
                    "type": "string",
                    "description": "Tenant identifier"
                  },
                  "collection": {
                    "type": "string",
                    "description": "Collection name"
                  }
                },
                "required": [
                  "items",
                  "tenant_id",
                  "collection"
                ]
              }
            }
          ]
        }
      }
    },
    "retrieval": {
      "initialize": {
        "status_code": 200,
        "success": true,
        "data": {
          "protocolVersion": "2024-11-05",
          "capabilities": {
            "tools": {
              "listChanged": true
            }
          },
          "serverInfo": {
            "name": "retrieval-mcp",
            "version": "1.0.0"
          }
        }
      },
      "tools_list": {
        "status_code": 200,
        "success": true,
        "data": {
          "tools": [
            {
              "name": "search_documents",
              "description": "Search for documents using semantic similarity",
              "inputSchema": {
                "type": "object",
                "properties": {
                  "query": {
                    "type": "string",
                    "description": "Search query"
                  },
                  "tenant_id": {
                    "type": "string",
                    "description": "Tenant identifier"
                  },
                  "top_k": {
                    "type": "integer",
                    "default": 5,
                    "description": "Number of results"
                  }
                },
                "required": [
                  "query",
                  "tenant_id"
                ]
              }
            }
          ]
        }
      }
    }
  },
  "integration_results": {
    "status": "partial",
    "message": "Some integration tests failed"
  },
  "overall_health_percentage": 100.0
}