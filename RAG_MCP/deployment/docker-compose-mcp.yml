version: '3.8'

services:
  # ============ RAG MCP SERVICES ============
  
  # Chunking MCP Server
  chunking-mcp:
    build:
      context: ../..
      dockerfile: infrastructure/docker/Dockerfile.chunking
    container_name: ta_v8_chunking_mcp
    ports:
      - "8001:8001"
    environment:
      # PostgreSQL connection (connects to existing master stack)
      POSTGRES_HOST: ta_v8_postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: postgres_user
      POSTGRES_PASSWORD: postgres_pass
      POSTGRES_DATABASE: ta_v8
      # Neo4j connection (connects to existing master stack)
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USER: neo4j
      NEO4J_PASSWORD: pJnssz3khcLtn6T
      # MinIO connection (connects to existing master stack)
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
      # MCP Configuration
      MCP_TRANSPORT_MODE: http
      MCP_SERVICE_NAME: chunking_v1
    depends_on:
      - postgres
      - neo4j
      - minio
    networks:
      - ta_v8_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G

  # Embedding MCP Server
  embedding-mcp:
    build:
      context: ../..
      dockerfile: infrastructure/docker/Dockerfile.embedding_mcp
    container_name: ta_v8_embedding_mcp
    ports:
      - "8002:8002"
    environment:
      # Qdrant connection (connects to existing master stack)
      QDRANT_HOST: qdrant
      QDRANT_PORT: 6333
      # External embedding service connection
      EMBEDDING_SERVICE_URL: http://multilingual-e5-large:8080
      # MCP Configuration
      MCP_TRANSPORT_MODE: http
      MCP_SERVICE_NAME: embedding_v1
    depends_on:
      - qdrant
      - multilingual-e5-large
    networks:
      - ta_v8_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G

  # Retrieval MCP Server
  retrieval-mcp:
    build:
      context: ../..
      dockerfile: infrastructure/docker/Dockerfile.retriever
    container_name: ta_v8_retrieval_mcp
    ports:
      - "8003:8003"
    environment:
      # PostgreSQL connection (connects to existing master stack)
      POSTGRES_HOST: ta_v8_postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: postgres_user
      POSTGRES_PASSWORD: postgres_pass
      POSTGRES_DATABASE: ta_v8
      # Qdrant connection (connects to existing master stack)
      QDRANT_HOST: qdrant
      QDRANT_PORT: 6333
      # Embedding MCP service connection
      EMBEDDING_MCP_URL: http://embedding-mcp:8002
      # MCP Configuration
      MCP_TRANSPORT_MODE: http
      MCP_SERVICE_NAME: retrieval_v1
    depends_on:
      - postgres
      - qdrant
      - embedding-mcp
    networks:
      - ta_v8_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G

# ============ NETWORKS ============
networks:
  ta_v8_network:
    external: true  # Connect to existing master stack network