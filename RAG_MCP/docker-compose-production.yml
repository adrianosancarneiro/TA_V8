version: '3.8'

networks:
  ta_v8_network:
    external: true

services:
  # ============================================================================
  # MCP MICROSERVICES - PRODUCTION READY (PROPER STRUCTURE)
  # ============================================================================
  
  chunking-mcp:
    build:
      context: .
      dockerfile: infrastructure/docker/Dockerfile.chunking
    container_name: ta_v8_chunking_mcp
    restart: unless-stopped
    ports:
      - "8001:8001"
    environment:
      # Database connections using network names
      - POSTGRES_URL=postgresql://postgres_user:postgres_pass@ta_v8_postgres:5432/ta_v8
      - NEO4J_URL=neo4j://neo4j:pJnssz3khcLtn6T@neo4j:7687
      # Monitoring and performance
      - PYTHONPATH=/app
      - LOG_LEVEL=INFO
      - WORKERS=2
      - MAX_CHUNK_SIZE=8192
      - CHUNK_OVERLAP=200
    env_file:
      - /etc/TA_V8/RAG_MCP/secrets.env
    volumes:
      - /tmp/ta_v8_chunking:/tmp
    networks:
      - ta_v8_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

  embedding-mcp:
    build:
      context: .
      dockerfile: infrastructure/docker/Dockerfile.embedding_mcp
    container_name: ta_v8_embedding_mcp
    restart: unless-stopped
    ports:
      - "8012:8002"
    environment:
      # Embedding service connection
      - EMBEDDING_URL=http://multilingual-e5-large:8080
      # Performance settings
      - PYTHONPATH=/app
      - LOG_LEVEL=INFO
      - WORKERS=2
      - BATCH_SIZE=32
      - MAX_TEXT_LENGTH=512
    env_file:
      - /etc/TA_V8/RAG_MCP/secrets.env
    volumes:
      - /tmp/ta_v8_embedding:/tmp
    networks:
      - ta_v8_network
    depends_on:
      - chunking-mcp
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

  retrieval-mcp:
    build:
      context: .
      dockerfile: infrastructure/docker/Dockerfile.retriever
    container_name: ta_v8_retrieval_mcp
    restart: unless-stopped
    ports:
      - "8003:8003"
    environment:
      # Service connections using network names
      - EMBEDDING_MCP_URL=http://ta_v8_embedding_mcp:8002
      - QDRANT_URL=http://qdrant:6333
      # Performance settings
      - PYTHONPATH=/app
      - LOG_LEVEL=INFO
      - WORKERS=2
      - MAX_RESULTS=50
      - DEFAULT_THRESHOLD=0.7
    env_file:
      - /etc/TA_V8/RAG_MCP/secrets.env
    volumes:
      - /tmp/ta_v8_retrieval:/tmp
    networks:
      - ta_v8_network
    depends_on:
      - embedding-mcp
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

  # ============================================================================
  # MAIN RAG AGENT TEAM - PRODUCTION READY
  # ============================================================================
  
  rag-agent-team:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ta_v8_rag_agent_team
    restart: unless-stopped
    ports:
      - "8006:8000"  # Main RAG API
    environment:
      # Core settings
      - PYTHONPATH=/app
      - LOG_LEVEL=INFO
      - WORKERS=1  # Single worker for agent coordination
      
      # MCP service endpoints using network names
      - CHUNKING_MCP_URL=http://ta_v8_chunking_mcp:8001
      - EMBEDDING_MCP_URL=http://ta_v8_embedding_mcp:8002
      - RETRIEVAL_MCP_URL=http://ta_v8_retrieval_mcp:8003
      
      # AI services using network names
      - OLLAMA_URL=http://ta_v8_ollama:11434
      - DEFAULT_LLM=llama3.2:latest
      
      # Agent settings
      - MAX_ROUNDS=3
      - MAX_RESULTS=10
      - SIMILARITY_THRESHOLD=0.7
    env_file:
      - /etc/TA_V8/RAG_MCP/secrets.env
    volumes:
      - .:/app:ro
      - ./shared:/app/shared:ro
      - /tmp/ta_v8_agent_team:/tmp
    networks:
      - ta_v8_network
    depends_on:
      - chunking-mcp
      - embedding-mcp
      - retrieval-mcp
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health').raise_for_status()"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s  # Longer startup time for agent initialization
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 1G

  # ============================================================================
  # MONITORING AND HEALTH
  # ============================================================================
  
  health-monitor:
    image: curlimages/curl:latest
    container_name: ta_v8_health_monitor
    restart: unless-stopped
    networks:
      - ta_v8_network
    command:
      - sh
      - -c
      - |
        while true; do
          echo "=== TA_V8 Health Check $$(date) ==="
          
          echo "Chunking MCP:" && curl -sf http://ta_v8_chunking_mcp:8000/health || echo "FAILED"
          echo "Embedding MCP:" && curl -sf http://ta_v8_embedding_mcp:8000/health || echo "FAILED"  
          echo "Retrieval MCP:" && curl -sf http://ta_v8_retrieval_mcp:8000/health || echo "FAILED"
          echo "RAG Agent Team:" && curl -sf http://ta_v8_rag_agent_team:8000/health || echo "FAILED"
          
          echo "================================="
          sleep 60
        done
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 64M